version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: guardian_db
    restart: unless-stopped
    env_file:
      - .env.development # ou .env.production
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend

  cache:
    image: redis:7-alpine
    container_name: guardian_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.development # ou .env.production
    container_name: guardian_api
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.development # ou .env.production
    container_name: guardian_worker
    restart: unless-stopped
    entrypoint: ["/app/worker"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    deploy:
      replicas: 2

volumes:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge