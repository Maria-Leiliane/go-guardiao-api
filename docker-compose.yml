version: '3.8'

services:
  # ------------------------------------
  # 1. Serviço de Banco de Dados (PostgreSQL)
  # ------------------------------------
  db:
    image: postgres:15-alpine
    container_name: guardian_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-guardiaodb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # ------------------------------------
  # 2. Serviço de Cache (Redis / ElastiCache Mock)
  # ------------------------------------
  cache:
    image: redis:7-alpine
    container_name: guardian_redis
    restart: always
    ports:
      - "6379:6379" # Exposto apenas para depuração local
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend

  # ------------------------------------
  # 3. Serviço de Backend API (Go)
  # ------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: guardian_api
    restart: on-failure
    ports:
      - "8080:8080" # Porta da API
    environment:
      # Variáveis de Conexão para o Go: Usamos o nome do serviço 'db' e 'cache' na rede interna
      DATABASE_URL: postgres://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-guardiaodb}?sslmode=disable
      REDIS_ADDR: cache:6379
      REDIS_PASSWORD: ""
    # Garante que o DB esteja pronto antes da API tentar se conectar
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
    networks:
      - backend

  # ------------------------------------
  # 4. Serviço de Worker (Go - Processamento Assíncrono)
  # ------------------------------------
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: guardian_worker
    restart: on-failure
    # Define o ponto de entrada para o binário do worker
    entrypoint: ["/app/worker"]
    environment:
      DATABASE_URL: postgres://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-guardiaodb}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

# ------------------------------------
# Configurações de Volumes e Redes
# ------------------------------------
volumes:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge